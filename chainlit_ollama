from langchain_openai import ChatOpenAI
from langchain.prompts import ChatPromptTemplate
from langchain.schema import StrOutputParser
from langchain.schema.runnable import Runnable
from langchain.schema.runnable.config import RunnableConfig
import chainlit as cl


@cl.on_chat_start
async def on_chat_start():
    model = ChatOpenAI(
        base_url='http://localhost:11434/v1', #Check the url of your ollama - this should be the default.
        api_key='ollama',  # required, but unused
        temperature=0,
        #model='llama3-groq-tool-use' #Use this model if you want to use charming "llm search the web agent"
        model='mistral-nemo',
        streaming=True
    )
    prompt = ChatPromptTemplate.from_messages(
        [
            (
                "system",
                "You are an assistant expert in python, plotly, dash. ",
            ),
            ("human", "{question}"),
        ]
    )
    runnable = prompt | model | StrOutputParser()
    cl.user_session.set("runnable", runnable)


@cl.on_message
async def on_message(message: cl.Message):
    runnable = cl.user_session.get("runnable")  # type: Runnable

    msg = cl.Message(content="")

    async for chunk in runnable.astream(
        {"question": message.content},
        config=RunnableConfig(callbacks=[cl.LangchainCallbackHandler()]),
    ):
        await msg.stream_token(chunk)

    await msg.send()

  #run this script in the terminal by typing:
  # chainlit run chainlit_ollama.py -w
